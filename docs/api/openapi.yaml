openapi: 3.1.1
info:
  title: GitLab Repository Analyzer API
  description: |
    GitLabリポジトリを分析するためのAPI
    
    ## 認証
    GitLab APIトークンを使用してプロジェクトデータにアクセスします。
    
    ## 実装ガイド
    クライアント実装、レスポンス形式、エラーハンドリングについては、
    以下のドキュメントを参照してください：
    - `/docs/api/client-implementation-guide.md` - クライアント実装包括ガイド
  version: 1.0.0
  contact:
    name: GitLab Repository Analyzer
  license:
    name: ISC

servers:
  - url: http://localhost:3000/api
    description: 開発環境
  - url: https://api.gitlab-analyzer.example.com
    description: 本番環境

paths:
  /projects:
    get:
      summary: プロジェクト一覧取得
      description: 登録されているGitLabプロジェクトの一覧を取得します
      tags:
        - Projects
      responses:
        '200':
          description: プロジェクト一覧の取得に成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      summary: プロジェクト新規作成
      description: 新しいGitLabプロジェクトを登録します
      tags:
        - Projects
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCreateRequest'
      responses:
        '201':
          description: プロジェクトの作成に成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectCreateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /projects/{project_id}:
    get:
      summary: プロジェクト詳細取得
      description: 指定されたIDのプロジェクト詳細情報を取得します
      tags:
        - Projects
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      responses:
        '200':
          description: プロジェクト詳細の取得に成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectDetailResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      summary: プロジェクト更新
      description: 指定されたIDのプロジェクト情報を更新します
      tags:
        - Projects
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdateRequest'
      responses:
        '200':
          description: プロジェクトの更新に成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectUpdateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      summary: プロジェクト削除
      description: |
        指定されたIDのプロジェクトを削除します。
        このAPIは冪等性を持ち、存在しないプロジェクトの削除も成功として扱います。
      tags:
        - Projects
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      responses:
        '204':
          description: プロジェクトの削除に成功（存在しない場合も含む）
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /health:
    get:
      summary: ヘルスチェック
      description: APIの稼働状況を確認します
      tags:
        - Health
      responses:
        '200':
          description: API正常稼働中
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

components:
  parameters:
    ProjectId:
      name: project_id
      in: path
      required: true
      description: プロジェクトID
      schema:
        type: integer
        format: int32
        minimum: 1

  schemas:
    Project:
      type: object
      required:
        - id
        - gitlab_id
        - name
        - web_url
        - default_branch
        - visibility
        - created_at
        - gitlab_created_at
      properties:
        id:
          type: integer
          format: int32
          description: 内部ID
          example: 1
        gitlab_id:
          type: integer
          format: int32
          description: GitLab プロジェクトID
          example: 12345
        name:
          type: string
          maxLength: 255
          description: プロジェクト名
          example: "sample-project"
        description:
          type: string
          nullable: true
          maxLength: 10000
          description: プロジェクト説明
          example: "サンプルプロジェクトの説明"
        web_url:
          type: string
          format: uri
          maxLength: 500
          description: プロジェクトのWebURL
          example: "https://gitlab.example.com/group/sample-project"
        default_branch:
          type: string
          maxLength: 255
          description: デフォルトブランチ
          example: "main"
        visibility:
          type: string
          enum: [public, internal, private]
          description: 可視性設定
          example: "private"
        created_at:
          type: string
          format: date-time
          description: 内部作成日時
          example: "2025-01-01T00:00:00.000Z"
        gitlab_created_at:
          type: string
          format: date-time
          description: GitLab上での作成日時
          example: "2024-12-31T23:59:59.000Z"

    ProjectCreateRequest:
      type: object
      required:
        - gitlab_id
        - name
        - web_url
        - default_branch
        - visibility
        - gitlab_created_at
      properties:
        gitlab_id:
          type: integer
          format: int32
          minimum: 1
          description: GitLab プロジェクトID
          example: 12345
        name:
          type: string
          minLength: 1
          maxLength: 255
          description: プロジェクト名
          example: "sample-project"
        description:
          type: string
          nullable: true
          maxLength: 10000
          description: プロジェクト説明
          example: "サンプルプロジェクトの説明"
        web_url:
          type: string
          format: uri
          maxLength: 500
          description: プロジェクトのWebURL
          example: "https://gitlab.example.com/group/sample-project"
        default_branch:
          type: string
          minLength: 1
          maxLength: 255
          description: デフォルトブランチ
          example: "main"
        visibility:
          type: string
          enum: [public, internal, private]
          description: 可視性設定
          example: "private"
        gitlab_created_at:
          type: string
          format: date-time
          description: GitLab上での作成日時
          example: "2024-12-31T23:59:59.000Z"

    ProjectUpdateRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
          description: プロジェクト名
          example: "updated-project"
        description:
          type: string
          nullable: true
          maxLength: 10000
          description: プロジェクト説明
          example: "更新されたプロジェクトの説明"
        web_url:
          type: string
          format: uri
          maxLength: 500
          description: プロジェクトのWebURL
          example: "https://gitlab.example.com/group/updated-project"
        default_branch:
          type: string
          minLength: 1
          maxLength: 255
          description: デフォルトブランチ
          example: "develop"
        visibility:
          type: string
          enum: [public, internal, private]
          description: 可視性設定
          example: "public"
        gitlab_created_at:
          type: string
          format: date-time
          description: GitLab上での作成日時
          example: "2024-12-31T23:59:59.000Z"

    BaseApiResponse:
      type: object
      required:
        - success
        - timestamp
      properties:
        success:
          type: boolean
          description: リクエストが成功したかどうか
        timestamp:
          type: string
          format: date-time
          description: レスポンスのタイムスタンプ

    ApiSuccessResponse:
      allOf:
        - $ref: '#/components/schemas/BaseApiResponse'
        - type: object
          required:
            - data
          properties:
            success:
              type: boolean
              enum: [true]
            data:
              description: レスポンスデータ

    ApiErrorResponse:
      allOf:
        - $ref: '#/components/schemas/BaseApiResponse'
        - type: object
          required:
            - error
          properties:
            success:
              type: boolean
              enum: [false]
            error:
              $ref: '#/components/schemas/ApiError'

    ApiError:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: エラーコード
          example: "VALIDATION_FAILED"
        message:
          type: string
          description: エラーメッセージ
          example: "入力内容に不正があります"
        details:
          type: string
          description: 詳細なエラー情報
          example: "フィールド 'name' は必須です"
        validation_errors:
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
          description: バリデーションエラーの詳細
        stack:
          type: string
          description: スタックトレース（開発環境のみ）

    ValidationError:
      type: object
      required:
        - field
        - message
      properties:
        field:
          type: string
          description: フィールド名
          example: "name"
        message:
          type: string
          description: エラーメッセージ
          example: "プロジェクト名は必須です"
        value:
          description: 入力された値


    ProjectListResponse:
      allOf:
        - $ref: '#/components/schemas/ApiSuccessResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Project'

    ProjectDetailResponse:
      allOf:
        - $ref: '#/components/schemas/ApiSuccessResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Project'

    ProjectCreateResponse:
      allOf:
        - $ref: '#/components/schemas/ApiSuccessResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Project'

    ProjectUpdateResponse:
      allOf:
        - $ref: '#/components/schemas/ApiSuccessResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Project'


    HealthResponse:
      allOf:
        - $ref: '#/components/schemas/ApiSuccessResponse'
        - type: object
          properties:
            data:
              type: object
              required:
                - status
                - version
                - timestamp
              properties:
                status:
                  type: string
                  example: "ok"
                version:
                  type: string
                  example: "1.0.0"
                timestamp:
                  type: string
                  format: date-time

  responses:
    BadRequest:
      description: 不正なリクエスト
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiErrorResponse'
          example:
            success: false
            timestamp: "2025-01-01T00:00:00.000Z"
            error:
              code: "INVALID_INPUT"
              message: "無効な入力です"

    ValidationError:
      description: バリデーションエラー
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiErrorResponse'
          example:
            success: false
            timestamp: "2025-01-01T00:00:00.000Z"
            error:
              code: "VALIDATION_FAILED"
              message: "入力内容に不正があります"
              validation_errors:
                - field: "name"
                  message: "プロジェクト名は必須です"
                  value: ""

    NotFound:
      description: リソースが見つからない
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiErrorResponse'
          example:
            success: false
            timestamp: "2025-01-01T00:00:00.000Z"
            error:
              code: "RESOURCE_NOT_FOUND"
              message: "リソースが見つかりません"

    Conflict:
      description: リソースの競合
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiErrorResponse'
          example:
            success: false
            timestamp: "2025-01-01T00:00:00.000Z"
            error:
              code: "RESOURCE_ALREADY_EXISTS"
              message: "リソースが既に存在します"

    InternalServerError:
      description: 内部サーバーエラー
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiErrorResponse'
          example:
            success: false
            timestamp: "2025-01-01T00:00:00.000Z"
            error:
              code: "INTERNAL_ERROR"
              message: "内部エラーが発生しました"

tags:
  - name: Projects
    description: プロジェクト関連API
  - name: Health
    description: ヘルスチェックAPI